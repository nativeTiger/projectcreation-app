{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAILED, LOGOUT_SUCCESS, SIGNUP_SUCCESS, SIGNUP_ERROR } from '../types/authTypes';\nexport const logIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: LOGIN_FAILED,\n        err\n      });\n    });\n  };\n};\nexport const logOut = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    });\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(resp => {\n      return firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      });\n    }).then(() => {\n      dispatch({\n        type: SIGNUP_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: SIGNUP_ERROR,\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["F:/REACT/REACT-REDUX-APP/marioplan/src/redux/actions/authActions.js"],"names":["LOGIN_SUCCESS","LOGIN_FAILED","LOGOUT_SUCCESS","SIGNUP_SUCCESS","SIGNUP_ERROR","logIn","credentials","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","type","catch","err","logOut","signOut","signUp","newUser","getFirestore","firestore","createUserWithEmailAndPassword","resp","collection","doc","user","uid","set","firstName","lastName","initials"],"mappings":"AAAA,SACIA,aADJ,EAEIC,YAFJ,EAGIC,cAHJ,EAIIC,cAJJ,EAKIC,YALJ,QAMO,oBANP;AAOA,OAAO,MAAMC,KAAK,GAAGC,WAAW,IAAI;AAChC,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA;AAAF,GAArB,KAAyC;AAC5C,UAAMC,QAAQ,GAAGD,WAAW,EAA5B;AACAC,IAAAA,QAAQ,CAACC,IAAT,GAAgBC,0BAAhB,CACIN,WAAW,CAACO,KADhB,EAEIP,WAAW,CAACQ,QAFhB,EAGEC,IAHF,CAGO,MAAM;AACTR,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEhB;AADD,OAAD,CAAR;AAGH,KAPD,EAOGiB,KAPH,CAOUC,GAAD,IAAS;AACdX,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEf,YADD;AAELiB,QAAAA;AAFK,OAAD,CAAR;AAIH,KAZD;AAaH,GAfD;AAgBH,CAjBM;AAmBP,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxB,SAAO,CAACZ,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA;AAAF,GAArB,KAAyC;AAC5C,UAAMC,QAAQ,GAAGD,WAAW,EAA5B;AACAC,IAAAA,QAAQ,CAACC,IAAT,GAAgBS,OAAhB,GAA0BL,IAA1B,CAA+B,MAAM;AACjCR,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEd;AADD,OAAD,CAAR;AAGH,KAJD;AAKH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMmB,MAAM,GAAIC,OAAD,IAAa;AAC/B,SAAO,CAACf,QAAD,EAAWC,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAec,IAAAA;AAAf,GAArB,KAAuD;AAC1D,UAAMb,QAAQ,GAAGD,WAAW,EAA5B;AACA,UAAMe,SAAS,GAAGD,YAAY,EAA9B;AAEAb,IAAAA,QAAQ,CAACC,IAAT,GAAgBc,8BAAhB,CACIH,OAAO,CAACT,KADZ,EAEIS,OAAO,CAACR,QAFZ,EAGEC,IAHF,CAGOW,IAAI,IAAI;AACX,aAAOF,SAAS,CAACG,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkCF,IAAI,CAACG,IAAL,CAAUC,GAA5C,EAAiDC,GAAjD,CAAqD;AACxDC,QAAAA,SAAS,EAAEV,OAAO,CAACU,SADqC;AAExDC,QAAAA,QAAQ,EAAEX,OAAO,CAACW,QAFsC;AAGxDC,QAAAA,QAAQ,EAAEZ,OAAO,CAACU,SAAR,CAAkB,CAAlB,IAAuBV,OAAO,CAACW,QAAR,CAAiB,CAAjB;AAHuB,OAArD,CAAP;AAKH,KATD,EASGlB,IATH,CASQ,MAAM;AACVR,MAAAA,QAAQ,CACJ;AACIS,QAAAA,IAAI,EAAEb;AADV,OADI,CAAR;AAKH,KAfD,EAeGc,KAfH,CAeUC,GAAD,IAAS;AACdX,MAAAA,QAAQ,CACJ;AACIS,QAAAA,IAAI,EAAEZ,YADV;AAEIc,QAAAA;AAFJ,OADI,CAAR;AAKH,KArBD;AAsBH,GA1BD;AA2BH,CA5BM","sourcesContent":["import {\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILED,\r\n    LOGOUT_SUCCESS,\r\n    SIGNUP_SUCCESS,\r\n    SIGNUP_ERROR\r\n} from '../types/authTypes';\r\nexport const logIn = credentials => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(() => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS\r\n            });\r\n        }).catch((err) => {\r\n            dispatch({\r\n                type: LOGIN_FAILED,\r\n                err\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const logOut = () => {\r\n    return (dispatch, getState, { getFirebase }) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then(resp => {\r\n            return firestore.collection('users').doc(resp.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0]\r\n            });\r\n        }).then(() => {\r\n            dispatch(\r\n                {\r\n                    type: SIGNUP_SUCCESS\r\n                }\r\n            );\r\n        }).catch((err) => {\r\n            dispatch(\r\n                { \r\n                    type: SIGNUP_ERROR, \r\n                    err \r\n                });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}